#!/usr/bin/env pwsh
# TODO replace api calls with gh commands
# File header specifies pwsh interpreter location for Linux and MacOS.

# This PowerShell script saves tar/zip file copies of private and public GitHub repos based on personal access token parameters.

# GitHub API Documentation: 
# https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#download-a-repository-archive-zip

# Example using access token to copy both public and private repos
$token = "insertGitHubAccessToken"

# Set HTTP request headers 
$headers = @{
    # Set Authorization header with personal access token
    Authorization = "Bearer $token"
    # Set Accept header to return media in GitHub API v3 in JSON format
    Accept = "application/vnd.github.v3+json"
}

# Get the repositories for the user
$uri = "https://api.github.com/user/repos?per_page=1000"
$repositories = Invoke-RestMethod -Uri $uri -Headers $headers

$totalRepos = $repositories.Count
$downloadCount = 0

# Download zip files for each repository
foreach ($repo in $repositories) {
    $name = $repo.name
    # Builds tar/zip uri with archive url, replacing the archive format with zipball and using branch name as reference
    # For zip files
    # $zipUri = $repo.archive_url -replace '{archive_format}', 'zipball' -replace '{/ref}', "/$branchName"
    # $zipFilePath = "C:\path\to\directory\$($name).zip"
    $tarUri = $repo.archive_url -replace '{archive_format}', 'zipball' -replace '{/ref}', "/$branchName"
    $tarFilePath = '$(env:HOME)' + '$($name)'+ '.tar'
    Write-Host "Downloading $($name)"

    # Download compressed file, handling 404/download errors
    try {
        try {
            if (-not $tarUri) {    #zipUri for zip
                throw "The archive URL is null or empty for repository $($repo.name)."
            }
            Invoke-WebRequest -Uri $tarUri -Headers $headers -OutFile $tarFilePath  #replace tar with zip
            $downloadCount++
        } catch {
            Write-Warning "Error downloading $($repo.name): $($_.Exception.Message)"
        }
    } catch {
        if ($_.Exception.Response.StatusCode.Value__ -eq 404) {
            Write-Warning "Error downloading $($name): $($_.Exception.Message)"
        } else {
            throw $_.Exception
        }
    }

# Output total number of repositories downloaded
Write-Host "Total number of repositories downloaded: $($downloadCount)/$($totalRepos)"
